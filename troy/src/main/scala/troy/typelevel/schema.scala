/*
 * Copyright 2016 Tamer AbdulRadi
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 package troy.typelevel

import scala.annotation.implicitNotFound

import singleton.ops.XString

/*
 * Name is expected to be a textual literal type
 * This type-class is meant to be instantiated at the call site (might be auto-generated by a macro/plugin)
 * to give the compiler a hint about the schema
 */
@implicitNotFound("Bug Alert: Table ${T} doesn't exists.")
trait TableExists[T <: XString]

object TableExists {
  def instance[Name <: XString] = new TableExists[Name] {}
}

/*
 * Represents the column's Cassandra data type
 * This type-class is meant to be instantiated at the call site (might be auto-generated by a macro/plugin)
 * to give the compiler a hint about the schema
 */
trait ColumnHasType[Table <: XString, Column <: XString] {
  type T <: ColumnType
}

object ColumnHasType {
  type Aux[Table <: XString, Column <: XString, CT <: ColumnType] = ColumnHasType[Table, Column] { type T = CT }

  def instance[Table <: XString, Column <: XString, CT <: ColumnType](implicit tableExists: TableExists[Table]): Aux[Table, Column, CT] =
    new ColumnHasType[Table, Column] { override type T = CT }
}
